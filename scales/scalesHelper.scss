/**
 * Helpers
 */

@import 'scalesVariables';

/**
 * Modular scale
 * (Public)
 */
@function modular-scale($increment, $value: base(), $ratio: null)
{
    $ratio: ratio($ratio);
    /*
    $value: strip-unit($value);
    $unit: unit($value);
    $_unitless: unitless($value);
    */
    $negative: false;
    @if($increment < 0) {
        $negative: true;
        $increment: $increment * -1
    }
	@for $i from 1 through $increment {
		$value: if($negative, $value / $ratio, $value * $ratio);
	}

	@return $value;
}

/**
 * Modular scale alias
 * (Public)
 */
@function ms($increment, $value: base(), $ratio: null)
{
	@return modular-scale($increment, $value, $ratio);
}

/**
 * Golden section
 * (Public)
 */
@function golden-section($section)
{
	@return map-get($golden-sections, 'gld#{$section}');
}

/**
 * Fibonacci
 * (Public)
 */
@function fib($n, $unit)
{
    $prec: 1; $f: 1;
    @for $i from 1 to $n {
        $t: $f;
        $f: $f + $prec;
        $prec: $t;
    }
    @return $f + $unit;
}


//////////////////////////////

@function base()
{
	@return ap('scales.base');
}

@function ratio($ratio: null)
{
	@return ap('scales.ratios.#{if($ratio, $ratio, ap("scales.ratio"))}');
}
