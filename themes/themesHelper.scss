/**
 * Costruzione dell'oggetto $options:
 * (
 *     properties: ( ..css properties ),
 *     directParents: ...
 *     parents: ...
 *     directChilds: ...
 *     childs: ...
 * )
 */
@function sanitizeThemeOptions($options, $extend: false)
{
    @if ( checkThemeOptions( $options ) ) {
        @return $options;
    }

    $properties: $options;
    $parents: null;

    @if( map-has-key( $properties, "parent" ) )
    {
        $parent: map-get( $properties, "parent" );
        $parents: if( type-of($parent) == "string", ( $parent ), $parent );
        $properties: map-remove( $properties, "parent" );
    }

    $directParents: $parents;
    @if $directParents {
        $parents: $directParents;
        @each $parent in $parents {
            $parents: join( $parents, themeGetParents($parent) );
        }
        $parents: filter( $parents );
    }

    $options: (
        properties: $properties,
        directParents: $directParents,
        parents: $parents,
        childs: (),
        directChilds: (),
        extend: $extend
    );

    @return $options;
}

@function checkThemeOptions($options)
{
    @each $var in $THEME_VARIABLES {
        @if not map-has-key($options, $var) {
            @return false;
        }
    }
    @return true;
}

//////////////////////////////

/**
 * Aggiunge $child ai 'parent' settati in child
 * @param  {theme} $child
 */
@function themeSetParentChildFromChild($child)
{
    @each $direct in (true, false) {
        $parents: toList( themeGetParents( $child, $direct ) );

        @each $parent in $parents {
            $t: themeAddChilds( $direct, $parent, $child );
        }
    }

    @return themeGet($child);
}

/**
 * Aggiunge $extend alla lista dei parent di tutti i temi che hanno come parent $parent
 * @param  {$theme} $parent       tema da cercare
 * @param  {$theme} $extend       tema da aggiungere
 * @param  {$theme} $excludeTheme tema a cui non verrà aggiunto $extend, ossia quello che ha generato la classe di conflitto
 */
@function themeSetWhereParentIs($parent, $extend, $excludeTheme)
{
    $result: ();
    $exclude: join(($excludeTheme), themeGetChilds($excludeTheme));

    @each $theme, $options in $themes {
        $parents: themeGetParents($theme);
        @if not index( $exclude, $theme) and index($parents, $parent)  {
            $t: themeAddParents(true, $theme, $extend);
            $result: append($result, $theme);
        }
    }
    @return $result;
}

////////////////////////////////////////////////////////////
//    Classi utili per la manipolazione delle proprietà
////////////////////////////////////////////////////////////

@function themeGetProperty( $theme, $property ) { @return map-get( themeGetProperties($theme), $property ); }
@function themeGetProperties( $theme )          { @return themeGet( $theme, "properties" ); }
@function themeHasProperty( $theme, $property ) { @return map-has-key( themeGetProperty($theme), $property ); }
@function themePropertiesLength( $theme )       { @return length( themeGet( $theme, "properties" ) ); }

@function themeRemoveProperties($theme, $properties)
{
    $properties: if( type-of($properties) == "map", map-keys( $properties ), $properties );

    @each $property in $properties {
        $themeProperties: themeGetProperties( $theme );
        $themeProperties: map-remove($themeProperties, $property);

        $t: themeSet( $theme, "properties", $themeProperties );
    }

    @return true;
}

//////////////////////////////

@function themeGetParents($theme, $direct: false) { @return themeGet( $theme, if( $direct, "directParents", "parents" ) ); }
@function themeGetChilds($theme, $direct: false) { @return themeGet( $theme, if( $direct, "directChilds", "childs" ) ); }

@function themeAddParents($direct, $theme, $newParents...)
{
    $newParents: toArgList( $newParents );

    $option: if($direct, "directParents", "parents");
    $parents: toList(themeGet( $theme, $option ));

    @each $parent in $newParents {
        @if not index( $parents, $parent ) {
            $parents: append( $parents, $parent );
            $r: themeAddChilds( $direct, $parent, $theme );
        }
    }

    $t: themeSet( $theme, $option, $parents );

    @if $direct {
        $r: themeAddParents(false, $theme, $newParents);
    }

    @return themeGet( $theme, $option );
}

@function themeAddChilds($direct, $theme, $newChilds...)
{
    $newChilds: toArgList( $newChilds );

    $option: if($direct, "directChilds", "childs");
    $childs: themeGet( $theme, $option );

    @each $child in $newChilds {
        $childs: if( not index( $childs, $child ), append( $childs, $child ), $childs );
    }

    $t: themeSet( $theme, $option, $childs );

    @if $direct {
        $t: themeAddChilds(false, $theme, $newChilds);
    }

    @return themeGet( $theme, $option );
}

//////////////////////////////

@function themeGet($arguments...) {
    @return call( "map-deep-get", $themes, $arguments );
}

@function themeSet($arguments...) {
    $themes: map-deep-set( $themes, $arguments ) !global;
    @return $themes;
}
