/**
 * Aggiunge un tema alla lista dei tempi.
 * Nell'oggetto $options, se è contenuta la stringa o la lista con la chiave 'parent',
 * verrà settato il tema corrente come figlio diretto dei 'parent' passati.
 */
@function ap-create-theme($theme, $options, $extend: false)
{
    $themes: map-deep-set(
        $themes,
        $theme,
        sanitizeThemeOptions( $options, $extend )
    ) !global;

    @return themeSetParentChildFromChild($theme);
}

/**
 * Setta il tema all'elemento o alla classe.
 * La mixin retituirà un errore se i temi non sono stati compilati
 */
@mixin ap-set-theme($theme)
{
    @if not $build__themes {
        @error "Compilare i temi inserendo chimando la mixin \'ap-compile-themes()\' dopo aver creato tutti i temi e prima di settarli.";
    }

    @if not map-get( $themes, $theme ){
        @error "Il tema #{$theme} non è stato trovato.";
    }

    @include ap-extend( toList( themeGetParents($theme) ) );
    @include ap-extend( $theme );
}

/**
 * Estende un tema solo se non ha la lista delle proprietà vuota
 */
@mixin ap-extend($themeOrList)
{
    @if type-of($themeOrList) == "list" {
        @each $theme in $themeOrList {
            @include ap-extend($theme);
        }
    } @else if themePropertiesLength($themeOrList) > 0 {
        @extend %#{$themeOrList};
    }
}

/**
 * Compila i temi.
 */
@mixin ap-compile-themes()
{
    @each $theme in map-keys($themes) {
        $r: resolveConflictsFor( $theme );
    }

    @each $theme in map-keys($themes) {
        @if not index( $themesExtends, $theme ) {
            %#{$theme} {
                @each $property, $value in themeGetProperties( $theme ) {
                    #{$property}: #{$value};
                }
            }
            $themesExtends: append( $themesExtends, $theme ) !global;
        }
    }

    $build__themes: true !global;
}

//////////////////////////////

@function resolveConflictsFor($theme)
{
    $conflicts: ();

    // Creo la mappa dei conflitti per ogni proprietà del tema
    @each $property, $value in themeGetProperties( $theme ) {
        $conflicts: updateParentsMatch(
            $conflicts,
            getParentsConflicts( $theme, $property ),
            $property
        );
    }

    // creo ed setto la nuove classi con la risoluzione dei conflitti
    @each $parent, $parentConflicts in $conflicts {
        $extendName: $parent + "__" + $theme;
        $t: ap-create-theme($extendName, $parentConflicts, true);
        $t: themeRemoveProperties($parent, $parentConflicts);
        $t: themeAddParents(true, $parent, $extendName);
        $t: themeSetWhereParentIs($parent, $extendName, $theme);
    }

    @return null;
}

/**
 * Ritorna la lista dei 'parent' con cui il tema $theme
 * va in conflitto con la proprietà $property.
 */
@function getParentsConflicts($theme, $property)
{
    $result: ();
    $parents: toList( themeGetParents( $theme, true ) );

    @each $parent in $parents {
        @if themeHasProperty( $parent, $property ) {
            $result: if( not index( $result, $parent ), append( $result, $parent ), $result );
        } @else {
            $result: join( $result, getParentsConflicts($parent, $property)); // Ricorsione per controllo confilitto sui parent
        }
    }

    @return $result;
}

/**
 * Modfico la mappa $result aggiungendo il conflitto con la nuova proprietà
 */
@function updateParentsMatch($result, $parents, $property)
{
    @each $parent in $parents {
        $parentPropertyValue: themeGetProperty($parent, $property);
        @if not map-has-key($result, $parent) {
            $result: map-deep-set($result, $parent, ( $property: $parentPropertyValue ) );
        } @else {
            $resultProperties: map-deep-get($result, $parent);
            $resultProperties: map-deep-set($resultProperties, $property, $parentPropertyValue);
            $result: map-deep-set($result, $parent, $resultProperties);
        }
    }

    @return $result;
}

