@function map-deep-get($map, $keys...)
{
    $keys: toArgList($keys);

    @each $key in $keys {
        @if(not map-has-key($map, $key)){
            @error 'The map \'#{$map}\' not has key \'#{$key}\'';
        }
        $map: map-get($map, $key);
    }

    @return $map;
}

@function map-deep-set($map, $keys.../*, $value */)
{
    $keys: toArgList($keys);

    $map-list: ($map,);
    $result: null;

    @if length($keys) == 2 {
        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
    }

    @for $i from 1 through length($keys) - 2 {
        $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
    }

    @for $i from length($map-list) through 1 {
        $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
    }

    @return $result;
}

//////////////////////////////

@function map-depth($map)
{
    $level: 1;

    @each $key, $value in $map {
        @if type-of($value) == 'map' {
            $level: max(map-depth($value) + 1, $level);
        }
    }

    @return $level;
}

//////////////////////////////

@function map-has-equal-keys($map1, $map2, $exclude: ())
{
    $keys1: map-get-keys-dotted($map1, $exclude);
    $keys2: map-get-keys-dotted($map2, $exclude);

    @each $key in $keys2 {
        @if (
            index($exclude, $key) == null and
            index($keys1, $key) != null
        ){
            @return false;
        }
    }
    @return true;
}

@function map-get-keys-dotted($map, $exclude: ())
{
    $return: ();

    @each $key, $value in $map {
        @if( index($exclude, $key) == null ){
            @if( type-of( $value ) == "map") {
                $list: explode(prefix( map-get-keys-dotted( $value ), $key + ".", " "));
                $return: join( $return, $list );
            } @else if( type-of( $value ) == "list") {
                $return: join( $return, $key );
            } @else {
                $return: append($return, $key);
            }
        }
    }

    @return sort($return);
}

@function map-zip($keys, $values)
{
    $l-keys: length($keys);
    $l-values: length($values);
    $min: min($l-keys, $l-values);
    $map: ();

    @if $l-keys != $l-values {
        @warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. "
        + "Resulting map will only have #{$min} pairs.";
    }

    @if $min == 0 {
        @return $map;
    }

    @for $i from 1 through $min {
        $map: map-merge($map, (nth($keys, $i): nth($values, $i)));
    }

    @return $map;
}

@function map-extend($map, $maps.../*, $deep */)
{
    $last: nth($maps, -1);
    $deep: $last == true;
    $max: if($deep, length($maps) - 1, length($maps));

    @for $i from 1 through $max {
        $current: nth($maps, $i);

        @if($current != false){
            @if (not $deep) {
                $map: map-merge($map, $current);
            } @else {
                @each $key, $value in $current {

                    @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
                        $value: map-extend(map-get($map, $key), $value, true);
                    }

                    $map: map-merge($map, ($key: $value));
                }
            }
        }
    }

    @return $map;
}

@function toJSONValue($value)
{
    $type: type-of($value);

    @return if(
        ($type == "number" and unitless($value)) or $type == 'bool'
        , $value
        , if($type == "map"
            , toJSON($value)
            , '\'' + if( not $value, 'null', $value ) + '\''
          )
    );
}

@function toJSON($map)
{
    $json: '{';

    @each $key, $value in $map
    {
        $json: $json + if($json == '{', '', ', ') + '\'#{$key}\': ';

        @if(type-of($value) == "map"){
            $json: $json + toJSON($value);
        } @else if(type-of($value) == "list"){
            $json: $json + '[' + implode(map($value, 'toJSONValue'), ', ') + ']';
        } @else {
            $json: $json + toJSONValue($value);
        }
    }

    $json: $json + '}';

    @return $json;
}